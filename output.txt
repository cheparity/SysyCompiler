INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371348\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
COMMA ,
IDENFR j
SEMICN ;
INTTK int
IDENFR even_num
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Checking IF statement\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR num
ASSIGN =
INTCON 10
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Checking if number %d is greater than 5\n"
COMMA ,
IDENFR num
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR num
EQL ==
INTCON 5
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Number is greater than 5.\n"
RPARENT )
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR even_num
ASSIGN =
INTCON 10
SEMICN ;
IDENFR even_num
NEQ !=
INTCON 1
SEMICN ;
MINU -
MINU -
IDENFR even_num
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR even_num
NEQ !=
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "IF statement went wrong\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR even_num
EQL ==
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "IF statement went wrong\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "IF statement works well\n"
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Checking IF-ELSE statement\n"
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR even_num
MOD %
INTCON 2
EQL ==
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "IF-ELSE statement went wrong\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "IF-ELSE statement works well\n"
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Checking FOR-BREAK statement (by printing numbers less than 3):\n"
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
GEQ >=
INTCON 6
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 3
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\nChecking FOR-CONTINUE statement (by printing 1 to 5 except 3):\n"
RPARENT )
SEMICN ;
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
IDENFR j
LEQ <=
INTCON 6
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR j
EQL ==
INTCON 3
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR j
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
IDENFR i
MULT *
INTCON 2
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
EQL ==
INTCON 1
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
EQL ==
INTCON 1
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
EQL ==
INTCON 1
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
EQL ==
INTCON 1
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test ok"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
