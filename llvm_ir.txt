declare i32 @getint()
declare void @putint(i32)
declare void @putch(i32)
declare void @putstr(i8)
@next = dso_local global [8 x i32] [i32 1, i32 0, i32 0, i32 -1, i32 -1, i32 0, i32 0, i32 1]
@len = dso_local constant i32 3
@next1 = dso_local constant [8 x i32] [i32 1, i32 0, i32 0, i32 -1, i32 -1, i32 0, i32 0, i32 1]
@xxx = dso_local constant [2 x i32] [i32 1, i32 2]
@ans = dso_local global i32 0
@arr = dso_local global [2 x i32] [i32 3, i32 1]

define dso_local i32 @getDif3N(i32 %0, i32 %1) {
	%3 = alloca i32
	store i32 %0, i32* %3
	%4 = alloca i32
	store i32 %1, i32* %4
	%5 = alloca i32
	store i32 1, i32* %5
	%6 = alloca i32
	store i32 1, i32* %6
	%7 = alloca i32
	store i32 1, i32* %7
	%8 = alloca i32
	store i32 0, i32* %8
	%9 = alloca [2 x i32]
	%10 = getelementptr [2 x i32], [2 x i32]* %9, i32 0, i32 0
	store i32 1, i32* %10
	%11 = getelementptr [2 x i32], [2 x i32]* %9, i32 0, i32 1
	store i32 2, i32* %11
	br label %12

12:	; condInline condLast
	%13 = load i32, i32* %5
	%14 = icmp sle i32 %13, 3
	br i1 %14, label %15, label %51

15:	; forBody beforeFor
	store i32 1, i32* %6
	br label %16

16:	; condInline condLast
	%17 = load i32, i32* %6
	%18 = icmp sle i32 %17, 3
	br i1 %18, label %19, label %47

19:	; forBody beforeFor
	store i32 1, i32* %7
	br label %20

20:	; condInline condLast
	%21 = load i32, i32* %7
	%22 = icmp sle i32 %21, 3
	br i1 %22, label %23, label %43

23:	; forBody
	br label %24

24:	; condInline
	%25 = load i32, i32* %5
	%26 = load i32, i32* %6
	%27 = icmp ne i32 %25, %26
	br i1 %27, label %28, label %36

28:	; condInline
	%29 = load i32, i32* %5
	%30 = load i32, i32* %7
	%31 = icmp ne i32 %29, %30
	br i1 %31, label %32, label %36

32:	; condInline condLast
	%33 = load i32, i32* %6
	%34 = load i32, i32* %7
	%35 = icmp ne i32 %33, %34
	br i1 %35, label %36, label %39

36:	; ifTrue
	%37 = load i32, i32* %8
	%38 = add i32 %37, 1
	store i32 %38, i32* %8
	br label %39

39:	; ifEnd loopEnd
	%40 = load i32, i32* %7
	%41 = add i32 %40, 1
	store i32 %41, i32* %7
	br label %42

42:	; forStmt2
	br label %20

43:	; forEnd loopEnd
	%44 = load i32, i32* %6
	%45 = add i32 %44, 1
	store i32 %45, i32* %6
	br label %46

46:	; forStmt2
	br label %16

47:	; forEnd loopEnd
	%48 = load i32, i32* %5
	%49 = add i32 %48, 1
	store i32 %49, i32* %5
	br label %50

50:	; forStmt2
	br label %12

51:	; forEnd
	%52 = load i32, i32* %8
	ret i32 %52

}
define dso_local i32 @judgeB(i32 %0, i32 %1) {
	%3 = alloca i32
	store i32 %0, i32* %3
	%4 = alloca i32
	store i32 %1, i32* %4
	br label %5

5:	; condInline condLast
	%6 = load i32, i32* %3
	%7 = load i32, i32* %4
	%8 = icmp sle i32 %6, %7
	br i1 %8, label %9, label %26

9:	; ifTrue
	br label %10

10:	; condInline condLast
	%11 = load i32, i32* %3
	%12 = load i32, i32* %4
	%13 = icmp slt i32 %11, %12
	br i1 %13, label %14, label %18

14:	; ifTrue
	%15 = load i32, i32* %3
	%16 = load i32, i32* %4
	%17 = sub i32 %15, %16
	ret i32 %17

18:	; else
	br label %19

19:	; condInline condLast
	%20 = load i32, i32* %3
	%21 = load i32, i32* %4
	%22 = icmp eq i32 %20, %21
	br i1 %22, label %23, label %24

23:	; ifTrue
	ret i32 0

24:	; ifEnd
	br label %25

25:	; ifEnd
	br label %26

26:	; else
	br label %27

27:	; condInline condLast
	%28 = load i32, i32* %3
	%29 = load i32, i32* %4
	%30 = icmp sge i32 %28, %29
	br i1 %30, label %31, label %48

31:	; ifTrue
	br label %32

32:	; condInline condLast
	%33 = load i32, i32* %3
	%34 = load i32, i32* %4
	%35 = icmp sgt i32 %33, %34
	br i1 %35, label %36, label %40

36:	; ifTrue
	%37 = load i32, i32* %3
	%38 = load i32, i32* %4
	%39 = sub i32 %37, %38
	ret i32 %39

40:	; else
	br label %41

41:	; condInline condLast
	%42 = load i32, i32* %3
	%43 = load i32, i32* %4
	%44 = icmp eq i32 %42, %43
	br i1 %44, label %45, label %46

45:	; ifTrue
	ret i32 0

46:	; ifEnd
	br label %47

47:	; ifEnd
	br label %48

48:	; ifEnd
	br label %49

49:	; ifEnd
	ret i32 0

}
define dso_local void @printArr(i32* %0) {
	%2 = alloca i32*
	store i32* %0, i32** %2
	%3 = alloca i32
	store i32 0, i32* %3
	br label %4

4:	; condInline condLast
	%5 = load i32, i32* %3
	%6 = icmp slt i32 %5, 2
	br i1 %6, label %7, label %15

7:	; forBody loopEnd
	%8 = load i32, i32* %3
	%9 = load i32*, i32** %2
	%10 = getelementptr i32, i32* %9, i32 %8
	%11 = load i32, i32* %10
	call void @putint(i32 %11)
	%12 = load i32, i32* %3
	%13 = add i32 %12, 1
	store i32 %13, i32* %3
	br label %14

14:	; forStmt2
	br label %4

15:	; forEnd
	call void @putch(i32 10)
	ret void

}
define dso_local void @printArr2(i32* %0) {
	%2 = alloca i32*
	store i32* %0, i32** %2
	%3 = alloca i32
	store i32 0, i32* %3
	br label %4

4:	; condInline condLast
	%5 = load i32, i32* %3
	%6 = icmp slt i32 %5, 4
	br i1 %6, label %7, label %16

7:	; forBody loopEnd
	%8 = load i32, i32* %3
	%9 = mul i32 %8, 2
	%10 = add i32 0, %9
	%11 = load i32*, i32** %2
	%12 = getelementptr i32, i32* %11, i32 %10
	call void @printArr(i32* %12)
	%13 = load i32, i32* %3
	%14 = add i32 %13, 1
	store i32 %14, i32* %3
	br label %15

15:	; forStmt2
	br label %4

16:	; forEnd
	ret void

}
define dso_local void @printHello() {
	%1 = alloca i32
	%2 = call i32 @getint()
	store i32 %2, i32* %1
	%3 = load i32, i32* %1
	call void @putch(i32 72)
	call void @putch(i32 101)
	call void @putch(i32 108)
	call void @putch(i32 108)
	call void @putch(i32 111)
	call void @putch(i32 32)
	call void @putint(i32 %3)
	call void @putch(i32 10)
	ret void

}
define dso_local i32 @add(i32 %0) {
	%2 = alloca i32
	store i32 %0, i32* %2
	%3 = alloca i32
	%4 = load i32, i32* %2
	%5 = add i32 %4, 3
	store i32 %5, i32* %3
	%6 = load i32, i32* %3
	ret i32 %6

}
define dso_local void @opp() {
	ret void

}
define dso_local i32 @main() {
	%1 = alloca i32
	store i32 3, i32* %1
	%2 = alloca i32
	store i32 0, i32* %2
	%3 = alloca i32
	store i32 1, i32* %3
	br label %4

4:	; condInline condLast
	%5 = load i32, i32* %3
	%6 = icmp ne i32 %5, 0
	%7 = xor i1 %6, 1
	br i1 %7, label %8, label %9

8:	; ifTrue
	store i32 0, i32* %3
	br label %9

9:	; ifEnd beforeFor
	store i32 1, i32* %3
	store i32 -1, i32* %3
	%10 = alloca i32
	%11 = load i32, i32* %2
	%12 = add i32 %11, 1
	%13 = sdiv i32 18, %12
	%14 = sub i32 %13, 14
	%15 = getelementptr [8 x i32], [8 x i32]* @next, i32 0, i32 0
	%16 = load i32, i32* %15
	%17 = add i32 %14, %16
	store i32 %17, i32* %10
	br label %18

18:	; condInline condLast
	%19 = load i32, i32* %2
	%20 = icmp sle i32 %19, 5
	br i1 %20, label %21, label %40

21:	; forBody
	br label %22

22:	; condInline condLast
	%23 = load i32, i32* %2
	%24 = icmp eq i32 %23, 3
	br i1 %24, label %25, label %28

25:	; ifTrue
	%26 = load i32, i32* %2
	%27 = add i32 %26, 1
	store i32 %27, i32* %2
	br label %39

28:	; ifEnd
	br label %29

29:	; condInline condLast
	%30 = load i32, i32* %2
	%31 = icmp eq i32 %30, 5
	br i1 %31, label %32, label %33

32:	; ifTrue
	br label %40

33:	; else
	%34 = load i32, i32* %2
	%35 = alloca i32
	store i32 %34, i32* %35
	br label %36

36:	; ifEnd loopEnd
	%37 = load i32, i32* %2
	%38 = add i32 %37, 1
	store i32 %38, i32* %2
	br label %39

39:	; forStmt2
	br label %18

40:	; forEnd
	%41 = call i32 @getint()
	store i32 %41, i32* %1
	%42 = load i32, i32* %1
	%43 = call i32 @add(i32 %42)
	call void @putint(i32 %43)
	call void @putch(i32 10)
	%44 = call i32 @getDif3N(i32 1, i32 999)
	store i32 %44, i32* %1
	%45 = load i32, i32* %1
	call void @putint(i32 %45)
	call void @putch(i32 10)
	%46 = call i32 @judgeB(i32 2, i32 3)
	store i32 %46, i32* %1
	%47 = load i32, i32* %1
	call void @putch(i32 106)
	call void @putch(i32 117)
	call void @putch(i32 100)
	call void @putch(i32 103)
	call void @putch(i32 101)
	call void @putch(i32 66)
	call void @putch(i32 32)
	call void @putch(i32 50)
	call void @putch(i32 44)
	call void @putch(i32 51)
	call void @putch(i32 32)
	call void @putch(i32 61)
	call void @putch(i32 32)
	call void @putint(i32 %47)
	call void @putch(i32 10)
	call void @printHello()
	%48 = getelementptr [8 x i32], [8 x i32]* @next, i32 0, i32 0
	call void @printArr2(i32* %48)
	%49 = getelementptr [8 x i32], [8 x i32]* @next, i32 0, i32 0
	call void @printArr(i32* %49)
	%50 = getelementptr [2 x i32], [2 x i32]* @arr, i32 0, i32 0
	call void @printArr(i32* %50)
	ret i32 0

}