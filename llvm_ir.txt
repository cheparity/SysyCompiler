declare i32 @getint()
declare void @putint(i32)
declare void @putch(i32)
declare void @putstr(i8)
@a = dso_local global i32 3

define dso_local i32 @func() {
	store i32 2, i32* @a
	ret i32 1

}
define dso_local i32 @func2() {
	store i32 4, i32* @a
	ret i32 10

}
define dso_local i32 @func3() {
	store i32 3, i32* @a
	ret i32 0

}
define dso_local i32 @main() {
	br label %1

1:	; condInline 
	br label %2

2:	; condInline 
	%3 = call i32 @func()
	%4 = icmp ne i32 0, %3
	br i1 %4, label %5, label %8

5:	; condInline 
	%6 = call i32 @func3()
	%7 = icmp ne i32 0, %6
	br i1 %7, label %8, label %8

8:	; condInline condFinal 
	%9 = call i32 @func2()
	%10 = icmp ne i32 0, %9
	br i1 %10, label %11, label %13

11:	; ifTrue 
	%12 = load i32, i32* @a
	call void @putint(i32 %12)
	call void @putch(i32 45)
	call void @putch(i32 45)
	call void @putch(i32 49)
	br label %13

13:	; ifEnd 
	br label %14

14:	; condInline 
	br label %15

15:	; condInline condFinal 
	%16 = call i32 @func3()
	%17 = icmp ne i32 0, %16
	br i1 %17, label %18, label %20

18:	; ifTrue 
	%19 = load i32, i32* @a
	call void @putint(i32 %19)
	call void @putch(i32 45)
	call void @putch(i32 45)
	call void @putch(i32 50)
	br label %20

20:	; ifEnd 
	br label %21

21:	; condInline 
	br label %22

22:	; condInline 
	%23 = call i32 @func3()
	%24 = icmp ne i32 0, %23
	br i1 %24, label %25, label %25

25:	; condInline condFinal 
	%26 = call i32 @func()
	%27 = call i32 @func2()
	%28 = icmp slt i32 %26, %27
	br i1 %28, label %29, label %31

29:	; ifTrue 
	%30 = load i32, i32* @a
	call void @putint(i32 %30)
	call void @putch(i32 45)
	call void @putch(i32 45)
	call void @putch(i32 51)
	br label %31

31:	; ifEnd 
	ret i32 0

}

