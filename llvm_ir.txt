declare i32 @getint()
declare void @putint(i32)
declare void @putch(i32)
declare void @putstr(i8)
@next = dso_local global [8 x i32] [i32 1, i32 0, i32 0, i32 -1, i32 -1, i32 0, i32 0, i32 1]
@len = dso_local constant i32 3
@next1 = dso_local constant [8 x i32] [i32 1, i32 0, i32 0, i32 -1, i32 -1, i32 0, i32 0, i32 1]
@xxx = dso_local constant [2 x i32] [i32 1, i32 2]
@ans = dso_local global i32 0
@arr = dso_local global [2 x i32] [i32 3, i32 1]

define dso_local i32 @getDif3N(i32 %0, i32 %1) {
	%3 = alloca i32
	store i32 %0, i32* %3
	%4 = alloca i32
	store i32 %1, i32* %4
	%5 = alloca i32
	store i32 1, i32* %5
	%6 = alloca i32
	store i32 1, i32* %6
	%7 = alloca i32
	store i32 1, i32* %7
	%8 = alloca i32
	store i32 0, i32* %8
	%9 = alloca [2 x i32]
	%10 = getelementptr [2 x i32], [2 x i32]* %9, i32 0, i32 0
	store i32 1, i32* %10
	%11 = getelementptr [2 x i32], [2 x i32]* %9, i32 0, i32 1
	store i32 2, i32* %11
	br label %12

12:	; cond 
	%13 = load i32, i32* %5
	%14 = icmp sle i32 %13, 3
	br i1 %14, label %15, label %50

15:	; forBody beforeFor 
	store i32 1, i32* %6
	br label %16

16:	; cond 
	%17 = load i32, i32* %6
	%18 = icmp sle i32 %17, 3
	br i1 %18, label %19, label %46

19:	; forBody beforeFor 
	store i32 1, i32* %7
	br label %20

20:	; cond 
	%21 = load i32, i32* %7
	%22 = icmp sle i32 %21, 3
	br i1 %22, label %23, label %42

23:	; forBody 
	%24 = load i32, i32* %5
	%25 = load i32, i32* %6
	%26 = icmp ne i32 %24, %25
	%27 = load i32, i32* %5
	%28 = load i32, i32* %7
	%29 = icmp ne i32 %27, %28
	%30 = and i1 %26, %29
	%31 = load i32, i32* %6
	%32 = load i32, i32* %7
	%33 = icmp ne i32 %31, %32
	%34 = and i1 %30, %33
	br i1 %34, label %35, label %38

35:	; ifTrue 
	%36 = load i32, i32* %8
	%37 = add i32 %36, 1
	store i32 %37, i32* %8
	br label %38

38:	; ifEnd loopEnd 
	%39 = load i32, i32* %7
	%40 = add i32 %39, 1
	store i32 %40, i32* %7
	br label %41

41:	; forStmt2 
	br label %20

42:	; forEnd loopEnd 
	%43 = load i32, i32* %6
	%44 = add i32 %43, 1
	store i32 %44, i32* %6
	br label %45

45:	; forStmt2 
	br label %16

46:	; forEnd loopEnd 
	%47 = load i32, i32* %5
	%48 = add i32 %47, 1
	store i32 %48, i32* %5
	br label %49

49:	; forStmt2 
	br label %12

50:	; forEnd 
	%51 = load i32, i32* %8
	ret i32 %51

}
define dso_local i32 @judgeB(i32 %0, i32 %1) {
	%3 = alloca i32
	store i32 %0, i32* %3
	%4 = alloca i32
	store i32 %1, i32* %4
	%5 = load i32, i32* %3
	%6 = load i32, i32* %4
	%7 = icmp sle i32 %5, %6
	br i1 %7, label %8, label %23

8:	; ifTrue 
	%9 = load i32, i32* %3
	%10 = load i32, i32* %4
	%11 = icmp slt i32 %9, %10
	br i1 %11, label %12, label %16

12:	; ifTrue 
	%13 = load i32, i32* %3
	%14 = load i32, i32* %4
	%15 = sub i32 %13, %14
	ret i32 %15

16:	; else 
	%17 = load i32, i32* %3
	%18 = load i32, i32* %4
	%19 = icmp eq i32 %17, %18
	br i1 %19, label %20, label %21

20:	; ifTrue 
	ret i32 0

21:	; ifEnd 
	br label %22

22:	; ifEnd 
	br label %23

23:	; else 
	%24 = load i32, i32* %3
	%25 = load i32, i32* %4
	%26 = icmp sge i32 %24, %25
	br i1 %26, label %27, label %42

27:	; ifTrue 
	%28 = load i32, i32* %3
	%29 = load i32, i32* %4
	%30 = icmp sgt i32 %28, %29
	br i1 %30, label %31, label %35

31:	; ifTrue 
	%32 = load i32, i32* %3
	%33 = load i32, i32* %4
	%34 = sub i32 %32, %33
	ret i32 %34

35:	; else 
	%36 = load i32, i32* %3
	%37 = load i32, i32* %4
	%38 = icmp eq i32 %36, %37
	br i1 %38, label %39, label %40

39:	; ifTrue 
	ret i32 0

40:	; ifEnd 
	br label %41

41:	; ifEnd 
	br label %42

42:	; ifEnd 
	br label %43

43:	; ifEnd 
	ret i32 0

}
define dso_local void @printArr(i32* %0) {
	%2 = alloca i32*
	store i32* %0, i32** %2
	%3 = alloca i32
	store i32 0, i32* %3
	br label %4

4:	; cond 
	%5 = load i32, i32* %3
	%6 = icmp slt i32 %5, 2
	br i1 %6, label %7, label %15

7:	; forBody loopEnd 
	%8 = load i32, i32* %3
	%9 = load i32*, i32** %2
	%10 = getelementptr i32, i32* %9, i32 %8
	%11 = load i32, i32* %10
	call void @putint(i32 %11)
	%12 = load i32, i32* %3
	%13 = add i32 %12, 1
	store i32 %13, i32* %3
	br label %14

14:	; forStmt2 
	br label %4

15:	; forEnd 
	call void @putch(i32 10)
	ret void

}
define dso_local void @printArr2(i32* %0) {
	%2 = alloca i32*
	store i32* %0, i32** %2
	%3 = alloca i32
	store i32 0, i32* %3
	br label %4

4:	; cond 
	%5 = load i32, i32* %3
	%6 = icmp slt i32 %5, 4
	br i1 %6, label %7, label %15

7:	; forBody loopEnd 
	%8 = load i32, i32* %3
	%9 = mul i32 %8, 2
	%10 = add i32 0, %9
	%11 = getelementptr i32*, i32** %2, i32 %10 ;todo 缺一句load
	call void @printArr(i32* %11)
	%12 = load i32, i32* %3
	%13 = add i32 %12, 1
	store i32 %13, i32* %3
	br label %14

14:	; forStmt2 
	br label %4

15:	; forEnd 
	ret void

}
define dso_local void @printHello() {
	%1 = alloca i32
	%2 = call i32 @getint()
	store i32 %2, i32* %1
	%3 = load i32, i32* %1
	call void @putch(i32 72)
	call void @putch(i32 101)
	call void @putch(i32 108)
	call void @putch(i32 108)
	call void @putch(i32 111)
	call void @putch(i32 32)
	call void @putint(i32 %3)
	call void @putch(i32 10)
	ret void

}
define dso_local i32 @add(i32 %0) {
	%2 = alloca i32
	store i32 %0, i32* %2
	%3 = alloca i32
	%4 = load i32, i32* %2
	%5 = add i32 %4, 3
	store i32 %5, i32* %3
	%6 = load i32, i32* %3
	ret i32 %6

}
define dso_local void @opp() {
	ret void

}
define dso_local i32 @main() {
	%1 = alloca i32
	store i32 3, i32* %1
	%2 = alloca i32
	store i32 0, i32* %2
	%3 = alloca i32
	store i32 1, i32* %3
	%4 = load i32, i32* %3
	%5 = icmp ne i32 %4, 0
	%6 = xor i1 %5, 1
	br i1 %6, label %7, label %8

7:	; ifTrue 
	store i32 0, i32* %3
	br label %8

8:	; ifEnd beforeFor 
	store i32 1, i32* %3
	store i32 -1, i32* %3
	%9 = alloca i32
	%10 = load i32, i32* %2
	%11 = add i32 %10, 1
	%12 = sdiv i32 18, %11
	%13 = sub i32 %12, 14
	%14 = getelementptr [8 x i32], [8 x i32]* @next, i32 0, i32 0
	%15 = load i32, i32* %14
	%16 = add i32 %13, %15
	store i32 %16, i32* %9
	br label %17

17:	; cond 
	%18 = load i32, i32* %2
	%19 = icmp sle i32 %18, 5
	br i1 %19, label %20, label %37

20:	; forBody 
	%21 = load i32, i32* %2
	%22 = icmp eq i32 %21, 3
	br i1 %22, label %23, label %26

23:	; ifTrue 
	%24 = load i32, i32* %2
	%25 = add i32 %24, 1
	store i32 %25, i32* %2
	br label %36

26:	; ifEnd 
	%27 = load i32, i32* %2
	%28 = icmp eq i32 %27, 5
	br i1 %28, label %29, label %30

29:	; ifTrue 
	br label %37

30:	; else 
	%31 = load i32, i32* %2
	%32 = alloca i32
	store i32 %31, i32* %32
	br label %33

33:	; ifEnd loopEnd 
	%34 = load i32, i32* %2
	%35 = add i32 %34, 1
	store i32 %35, i32* %2
	br label %36

36:	; forStmt2 
	br label %17

37:	; forEnd 
	%38 = call i32 @getint()
	store i32 %38, i32* %1
	%39 = load i32, i32* %1
	%40 = call i32 @add(i32 %39)
	call void @putint(i32 %40)
	call void @putch(i32 10)
	%41 = call i32 @getDif3N(i32 1, i32 999)
	store i32 %41, i32* %1
	%42 = load i32, i32* %1
	call void @putint(i32 %42)
	call void @putch(i32 10)
	%43 = call i32 @judgeB(i32 2, i32 3)
	store i32 %43, i32* %1
	%44 = load i32, i32* %1
	call void @putch(i32 106)
	call void @putch(i32 117)
	call void @putch(i32 100)
	call void @putch(i32 103)
	call void @putch(i32 101)
	call void @putch(i32 66)
	call void @putch(i32 32)
	call void @putch(i32 50)
	call void @putch(i32 44)
	call void @putch(i32 51)
	call void @putch(i32 32)
	call void @putch(i32 61)
	call void @putch(i32 32)
	call void @putint(i32 %44)
	call void @putch(i32 10)
	call void @printHello()
	%45 = getelementptr [8 x i32], [8 x i32]* @next, i32 0, i32 0
	call void @printArr2(i32* %45)
	%46 = getelementptr [8 x i32], [8 x i32]* @next, i32 0, i32 0
	call void @printArr(i32* %46)
	%47 = getelementptr [2 x i32], [2 x i32]* @arr, i32 0, i32 0
	call void @printArr(i32* %47)
	ret i32 0

}

