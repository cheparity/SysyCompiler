declare i32 @getint()
declare void @putint(i32)
declare void @putch(i32)
declare void @putstr(i8)
@c_common = dso_local constant i32 10
@c_array = dso_local constant [3 x i32] [i32 1, i32 2, i32 3]
@c_matrix = dso_local constant [9 x i32] [i32 1, i32 2, i32 3, i32 1, i32 2, i32 3, i32 1, i32 2, i32 3]
@v_common = dso_local global i32 zeroinitializer
@v_array = dso_local global [3 x i32] zeroinitializer
@v_matrix = dso_local global [9 x i32] zeroinitializer
@v_commonInit = dso_local global i32 10
@v_arrayInit = dso_local global [3 x i32] [i32 1, i32 2, i32 3]
@v_matrixInit = dso_local global [9 x i32] [i32 1, i32 2, i32 3, i32 1, i32 2, i32 3, i32 1, i32 2, i32 3]

define dso_local void @print(i32 %0) {
	%2 = alloca i32
	store i32 %0, i32* %2
	%3 = load i32, i32* %2
	call void @putch(i32 10)
	call void @putch(i32 102)
	call void @putch(i32 50)
	call void @putch(i32 40)
	call void @putch(i32 41)
	call void @putch(i32 32)
	call void @putch(i32 102)
	call void @putch(i32 108)
	call void @putch(i32 97)
	call void @putch(i32 103)
	call void @putch(i32 32)
	call void @putch(i32 58)
	call void @putch(i32 32)
	call void @putint(i32 %3)
	ret void

}
define dso_local i32 @f0() {
	ret i32 1

}
define dso_local i32 @f1(i32* %0, i32* %1, i32* %2) {
	%4 = alloca i32*
	store i32* %0, i32** %4
	%5 = alloca i32*
	store i32* %1, i32** %5
	%6 = alloca i32*
	store i32* %2, i32** %6
	%7 = load i32*, i32** %4
	%8 = getelementptr i32, i32* %7, i32 0
	%9 = load i32, i32* %8
	%10 = load i32*, i32** %5
	%11 = getelementptr i32, i32* %10, i32 0
	%12 = load i32, i32* %11
	%13 = add i32 %9, %12
	%14 = load i32*, i32** %6
	%15 = getelementptr i32, i32* %14, i32 0
	%16 = load i32, i32* %15
	%17 = add i32 %13, %16
	ret i32 %17

}
define dso_local i32 @f2(i32 %0, i32 %1) {
	%3 = alloca i32
	store i32 %0, i32* %3
	%4 = alloca i32
	store i32 %1, i32* %4
	%5 = alloca i32
	%6 = alloca i32
	%7 = alloca [2 x i32]
	%8 = getelementptr [2 x i32], [2 x i32]* %7, i32 0, i32 0
	store i32 1, i32* %8
	%9 = getelementptr [2 x i32], [2 x i32]* %7, i32 0, i32 1
	store i32 2, i32* %9
	%10 = alloca [9 x i32]
	%11 = getelementptr [9 x i32], [9 x i32]* %10, i32 0, i32 0
	store i32 1, i32* %11
	%12 = getelementptr [9 x i32], [9 x i32]* %10, i32 0, i32 1
	store i32 2, i32* %12
	%13 = getelementptr [9 x i32], [9 x i32]* %10, i32 0, i32 2
	store i32 3, i32* %13
	%14 = getelementptr [9 x i32], [9 x i32]* %10, i32 0, i32 3
	store i32 1, i32* %14
	%15 = getelementptr [9 x i32], [9 x i32]* %10, i32 0, i32 4
	store i32 2, i32* %15
	%16 = getelementptr [9 x i32], [9 x i32]* %10, i32 0, i32 5
	store i32 3, i32* %16
	%17 = getelementptr [9 x i32], [9 x i32]* %10, i32 0, i32 6
	store i32 1, i32* %17
	%18 = getelementptr [9 x i32], [9 x i32]* %10, i32 0, i32 7
	store i32 2, i32* %18
	%19 = getelementptr [9 x i32], [9 x i32]* %10, i32 0, i32 8
	store i32 3, i32* %19
	%20 = load i32, i32* %3
	%21 = load i32, i32* %4
	%22 = mul i32 %20, %21
	%23 = sub i32 0, %22
	%24 = load i32, i32* %3
	%25 = load i32, i32* %4
	%26 = sdiv i32 %24, %25
	%27 = add i32 %23, %26
	%28 = load i32, i32* %3
	%29 = load i32, i32* %4
	%30 = srem i32 %28, %29
	%31 = add i32 %27, %30
	%32 = sub i32 %31, 1
	%33 = getelementptr [2 x i32], [2 x i32]* %7, i32 0, i32 0
	%34 = getelementptr [9 x i32], [9 x i32]* %10, i32 0, i32 0
	%35 = getelementptr [9 x i32], [9 x i32]* %10, i32 0, i32 0
	%36 = call i32 @f1(i32* %33, i32* %34, i32* %35)
	%37 = add i32 %32, %36
	%38 = call i32 @f0()
	%39 = sub i32 %37, %38
	store i32 %39, i32* %5
	%40 = load i32, i32* %3
	%41 = icmp sgt i32 %40, 10
	%42 = load i32, i32* %4
	%43 = icmp sgt i32 %42, 10
	%44 = and i1 %41, %43
	br i1 %44, label %45, label %46

45:	; ifTrue 
	call void @print(i32 1)
	store i32 0, i32* %6
	br label %46

46:	; ifEnd 
	%47 = load i32, i32* %3
	%48 = icmp sgt i32 %47, 10
	%49 = load i32, i32* %4
	%50 = icmp sle i32 %49, 10
	%51 = and i1 %48, %50
	br i1 %51, label %52, label %53

52:	; ifTrue 
	call void @print(i32 2)
	store i32 0, i32* %6
	br label %53

53:	; ifEnd 
	%54 = load i32, i32* %3
	%55 = icmp sle i32 %54, 10
	%56 = load i32, i32* %4
	%57 = icmp sle i32 %56, 10
	%58 = and i1 %55, %57
	br i1 %58, label %59, label %60

59:	; ifTrue 
	call void @print(i32 3)
	store i32 1, i32* %6
	br label %60

60:	; ifEnd 
	%61 = load i32, i32* %3
	%62 = icmp sle i32 %61, 10
	%63 = load i32, i32* %4
	%64 = icmp sgt i32 %63, 10
	%65 = and i1 %62, %64
	br i1 %65, label %66, label %67

66:	; ifTrue 
	call void @print(i32 4)
	store i32 1, i32* %6
	br label %67

67:	; ifEnd 
	%68 = load i32, i32* %6
	ret i32 %68

}
define dso_local i32 @main() {
	%1 = alloca i32
	%2 = alloca i32
	%3 = alloca i32
	%4 = alloca i32
	%5 = alloca i32
	%6 = alloca i32
	store i32 1, i32* %1
	store i32 2, i32* %2
	store i32 0, i32* %6
	%7 = load i32, i32* %1
	%8 = load i32, i32* %2
	%9 = icmp ne i32 %7, %8
	br i1 %9, label %10, label %56

10:	; ifTrue beforeFor 
	br label %56

11:	; cond 
	%12 = load i32, i32* %6
	%13 = icmp slt i32 %12, 3
	br i1 %13, label %14, label %55

14:	; forBody 
	call void @putch(i32 53)
	call void @putch(i32 53)
	call void @putch(i32 53)
	call void @putch(i32 53)
	call void @putch(i32 53)
	call void @putch(i32 53)
	%15 = alloca i32
	%16 = alloca i32
	%17 = load i32, i32* %1
	%18 = load i32, i32* %2
	%19 = add i32 %17, %18
	store i32 %19, i32* %15
	%20 = load i32, i32* %1
	%21 = load i32, i32* %2
	%22 = sub i32 %20, %21
	store i32 %22, i32* %16
	%23 = load i32, i32* %15
	%24 = load i32, i32* %16
	%25 = call i32 @f2(i32 %23, i32 %24)
	store i32 %25, i32* %3
	%26 = load i32, i32* %16
	%27 = load i32, i32* %15
	%28 = call i32 @f2(i32 %26, i32 %27)
	store i32 %28, i32* %4
	%29 = load i32, i32* %3
	%30 = icmp eq i32 %29, 0
	%31 = load i32, i32* %4
	%32 = icmp ne i32 %31, 0
	%33 = xor i1 %32, 1
	%34 = or i1 %30, %33
	br i1 %34, label %35, label %36

35:	; ifTrue 
	store i32 0, i32* %5
	br label %37

36:	; else 
	store i32 1, i32* %5
	br label %37

37:	; ifEnd 
	%38 = load i32, i32* %5
	%39 = load i32, i32* %15
	%40 = load i32, i32* %16
	call void @putch(i32 10)
	call void @putch(i32 102)
	call void @putch(i32 108)
	call void @putch(i32 97)
	call void @putch(i32 103)
	call void @putch(i32 32)
	call void @putch(i32 61)
	call void @putch(i32 32)
	call void @putint(i32 %38)
	call void @putch(i32 32)
	call void @putch(i32 58)
	call void @putch(i32 32)
	call void @putch(i32 99)
	call void @putch(i32 49)
	call void @putch(i32 32)
	call void @putch(i32 61)
	call void @putch(i32 32)
	call void @putint(i32 %39)
	call void @putch(i32 44)
	call void @putch(i32 32)
	call void @putch(i32 99)
	call void @putch(i32 50)
	call void @putch(i32 32)
	call void @putch(i32 61)
	call void @putch(i32 32)
	call void @putint(i32 %40)
	%41 = load i32, i32* %6
	%42 = add i32 %41, 1
	store i32 %42, i32* %6
	%43 = load i32, i32* %1
	%44 = add i32 %43, 5
	store i32 %44, i32* %1
	%45 = load i32, i32* %2
	%46 = add i32 %45, 5
	store i32 %46, i32* %2
	%47 = load i32, i32* %6
	%48 = icmp sge i32 %47, 10
	br i1 %48, label %49, label %50

49:	; ifTrue 
	br label %11

50:	; ifEnd 
	%51 = load i32, i32* %6
	%52 = icmp slt i32 %51, 0
	br i1 %52, label %53, label %54

53:	; ifTrue 
	br label %55

54:	; ifEnd loopEnd 
	br label %11

55:	; forEnd 
	br label %56

56:	; ifEnd 
	ret i32 0

}

