declare i32 @getint()
declare void @putint(i32)
declare void @putch(i32)
declare void @putstr(i8)
@fib_matrix = dso_local global [4 x i32] [i32 1, i32 1, i32 1, i32 0]
@__res = dso_local constant [4 x i32] [i32 5, i32 5, i32 2, i32 3]
@__useless = dso_local constant [4 x i32] [i32 1, i32 1, i32 1, i32 0]

define dso_local void @__vec_mul(i32* %0, i32* %1, i32* %2) {
	%4 = alloca i32*
	store i32* %0, i32** %4
	%5 = alloca i32*
	store i32* %1, i32** %5
	%6 = alloca i32*
	store i32* %2, i32** %6
	%7 = load i32*, i32** %4
	%8 = getelementptr i32, i32* %7, i32 0
	%9 = load i32*, i32** %6
	%10 = getelementptr i32, i32* %9, i32 0
	%11 = load i32, i32* %10
	%12 = load i32*, i32** %5
	%13 = getelementptr i32, i32* %12, i32 0
	%14 = load i32, i32* %13
	%15 = mul i32 %11, %14
	%16 = load i32*, i32** %6
	%17 = getelementptr i32, i32* %16, i32 1
	%18 = load i32, i32* %17
	%19 = load i32*, i32** %5
	%20 = getelementptr i32, i32* %19, i32 1
	%21 = load i32, i32* %20
	%22 = mul i32 %18, %21
	%23 = add i32 %15, %22
	store i32 %23, i32* %8
	%24 = load i32*, i32** %4
	%25 = getelementptr i32, i32* %24, i32 1
	%26 = load i32*, i32** %6
	%27 = getelementptr i32, i32* %26, i32 0
	%28 = load i32, i32* %27
	%29 = load i32*, i32** %5
	%30 = getelementptr i32, i32* %29, i32 2
	%31 = load i32, i32* %30
	%32 = mul i32 %28, %31
	%33 = load i32*, i32** %6
	%34 = getelementptr i32, i32* %33, i32 1
	%35 = load i32, i32* %34
	%36 = load i32*, i32** %5
	%37 = getelementptr i32, i32* %36, i32 3
	%38 = load i32, i32* %37
	%39 = mul i32 %35, %38
	%40 = add i32 %32, %39
	store i32 %40, i32* %25
	ret void

}
define dso_local void @__mat_mul(i32* %0, i32* %1, i32* %2) {
	%4 = alloca i32*
	store i32* %0, i32** %4
	%5 = alloca i32*
	store i32* %1, i32** %5
	%6 = alloca i32*
	store i32* %2, i32** %6
	%7 = load i32*, i32** %4
	%8 = getelementptr i32, i32* %7, i32 0
	%9 = load i32*, i32** %5
	%10 = getelementptr i32, i32* %9, i32 0
	%11 = load i32, i32* %10
	%12 = load i32*, i32** %6
	%13 = getelementptr i32, i32* %12, i32 0
	%14 = load i32, i32* %13
	%15 = mul i32 %11, %14
	%16 = load i32*, i32** %5
	%17 = getelementptr i32, i32* %16, i32 1
	%18 = load i32, i32* %17
	%19 = load i32*, i32** %6
	%20 = getelementptr i32, i32* %19, i32 2
	%21 = load i32, i32* %20
	%22 = mul i32 %18, %21
	%23 = add i32 %15, %22
	store i32 %23, i32* %8
	%24 = load i32*, i32** %4
	%25 = getelementptr i32, i32* %24, i32 1
	%26 = load i32*, i32** %5
	%27 = getelementptr i32, i32* %26, i32 0
	%28 = load i32, i32* %27
	%29 = load i32*, i32** %6
	%30 = getelementptr i32, i32* %29, i32 1
	%31 = load i32, i32* %30
	%32 = mul i32 %28, %31
	%33 = load i32*, i32** %5
	%34 = getelementptr i32, i32* %33, i32 1
	%35 = load i32, i32* %34
	%36 = load i32*, i32** %6
	%37 = getelementptr i32, i32* %36, i32 3
	%38 = load i32, i32* %37
	%39 = mul i32 %35, %38
	%40 = add i32 %32, %39
	store i32 %40, i32* %25
	%41 = load i32*, i32** %4
	%42 = getelementptr i32, i32* %41, i32 2
	%43 = load i32*, i32** %5
	%44 = getelementptr i32, i32* %43, i32 2
	%45 = load i32, i32* %44
	%46 = load i32*, i32** %6
	%47 = getelementptr i32, i32* %46, i32 0
	%48 = load i32, i32* %47
	%49 = mul i32 %45, %48
	%50 = load i32*, i32** %5
	%51 = getelementptr i32, i32* %50, i32 3
	%52 = load i32, i32* %51
	%53 = load i32*, i32** %6
	%54 = getelementptr i32, i32* %53, i32 2
	%55 = load i32, i32* %54
	%56 = mul i32 %52, %55
	%57 = add i32 %49, %56
	store i32 %57, i32* %42
	%58 = load i32*, i32** %4
	%59 = getelementptr i32, i32* %58, i32 3
	%60 = load i32*, i32** %5
	%61 = getelementptr i32, i32* %60, i32 2
	%62 = load i32, i32* %61
	%63 = load i32*, i32** %6
	%64 = getelementptr i32, i32* %63, i32 1
	%65 = load i32, i32* %64
	%66 = mul i32 %62, %65
	%67 = load i32*, i32** %5
	%68 = getelementptr i32, i32* %67, i32 3
	%69 = load i32, i32* %68
	%70 = load i32*, i32** %6
	%71 = getelementptr i32, i32* %70, i32 3
	%72 = load i32, i32* %71
	%73 = mul i32 %69, %72
	%74 = add i32 %66, %73
	store i32 %74, i32* %59
	ret void

}
define dso_local i32 @__power(i32 %0, i32* %1, i32* %2) {
	%4 = alloca i32
	store i32 %0, i32* %4
	%5 = alloca i32*
	store i32* %1, i32** %5
	%6 = alloca i32*
	store i32* %2, i32** %6
	br label %7

7:	; cond 
	%8 = load i32, i32* %4
	%9 = icmp eq i32 %8, 1
	br i1 %9, label %10, label %31

10:	; ifTrue 
	%11 = load i32*, i32** %6
	%12 = getelementptr i32, i32* %11, i32 0
	%13 = load i32*, i32** %5
	%14 = getelementptr i32, i32* %13, i32 0
	%15 = load i32, i32* %14
	store i32 %15, i32* %12
	%16 = load i32*, i32** %6
	%17 = getelementptr i32, i32* %16, i32 1
	%18 = load i32*, i32** %5
	%19 = getelementptr i32, i32* %18, i32 1
	%20 = load i32, i32* %19
	store i32 %20, i32* %17
	%21 = load i32*, i32** %6
	%22 = getelementptr i32, i32* %21, i32 2
	%23 = load i32*, i32** %5
	%24 = getelementptr i32, i32* %23, i32 2
	%25 = load i32, i32* %24
	store i32 %25, i32* %22
	%26 = load i32*, i32** %6
	%27 = getelementptr i32, i32* %26, i32 3
	%28 = load i32*, i32** %5
	%29 = getelementptr i32, i32* %28, i32 3
	%30 = load i32, i32* %29
	store i32 %30, i32* %27
	ret i32 0

31:	; else 
	%32 = load i32*, i32** %6
	%33 = getelementptr i32, i32* %32, i32 0
	%34 = load i32*, i32** %5
	%35 = getelementptr i32, i32* %34, i32 0
	%36 = getelementptr [4 x i32], [4 x i32]* @fib_matrix, i32 0, i32 0
	call void @__mat_mul(i32* %33, i32* %35, i32* %36)
	%37 = load i32*, i32** %5
	%38 = getelementptr i32, i32* %37, i32 0
	%39 = load i32*, i32** %6
	%40 = getelementptr i32, i32* %39, i32 0
	%41 = load i32, i32* %40
	store i32 %41, i32* %38
	%42 = load i32*, i32** %5
	%43 = getelementptr i32, i32* %42, i32 1
	%44 = load i32*, i32** %6
	%45 = getelementptr i32, i32* %44, i32 1
	%46 = load i32, i32* %45
	store i32 %46, i32* %43
	%47 = load i32*, i32** %5
	%48 = getelementptr i32, i32* %47, i32 2
	%49 = load i32*, i32** %6
	%50 = getelementptr i32, i32* %49, i32 2
	%51 = load i32, i32* %50
	store i32 %51, i32* %48
	%52 = load i32*, i32** %5
	%53 = getelementptr i32, i32* %52, i32 3
	%54 = load i32*, i32** %6
	%55 = getelementptr i32, i32* %54, i32 3
	%56 = load i32, i32* %55
	store i32 %56, i32* %53
	%57 = load i32, i32* %4
	%58 = sub i32 %57, 1
	%59 = load i32*, i32** %5
	%60 = getelementptr i32, i32* %59, i32 0
	%61 = load i32*, i32** %6
	%62 = getelementptr i32, i32* %61, i32 0
	%63 = call i32 @__power(i32 %58, i32* %60, i32* %62)
	ret i32 %63

64:	; ifEnd 
	ret i32 0

}
define dso_local i32 @power(i32 %0, i32* %1) {
	%3 = alloca i32
	store i32 %0, i32* %3
	%4 = alloca i32*
	store i32* %1, i32** %4
	br label %5

5:	; cond 
	%6 = load i32, i32* %3
	%7 = icmp sle i32 %6, 0
	br i1 %7, label %8, label %9

8:	; ifTrue 
	ret i32 -1

9:	; ifEnd 
	%10 = alloca [4 x i32]
	%11 = getelementptr [4 x i32], [4 x i32]* %10, i32 0, i32 0
	store i32 1, i32* %11
	%12 = getelementptr [4 x i32], [4 x i32]* %10, i32 0, i32 1
	store i32 1, i32* %12
	%13 = getelementptr [4 x i32], [4 x i32]* %10, i32 0, i32 2
	store i32 1, i32* %13
	%14 = getelementptr [4 x i32], [4 x i32]* %10, i32 0, i32 3
	store i32 0, i32* %14
	%15 = load i32, i32* %3
	%16 = getelementptr [4 x i32], [4 x i32]* %10, i32 0, i32 0
	%17 = load i32*, i32** %4
	%18 = getelementptr i32, i32* %17, i32 0
	%19 = call i32 @__power(i32 %15, i32* %16, i32* %18)
	ret i32 %19

}
define dso_local i32 @error() {
	call void @putch(i32 69)
	call void @putch(i32 114)
	call void @putch(i32 114)
	call void @putch(i32 111)
	call void @putch(i32 114)
	call void @putch(i32 33)
	call void @putch(i32 10)
	ret i32 1

}
define dso_local i32 @out(i32* %0) {
	%2 = alloca i32*
	store i32* %0, i32** %2
	%3 = load i32*, i32** %2
	%4 = getelementptr i32, i32* %3, i32 0
	%5 = load i32, i32* %4
	%6 = load i32*, i32** %2
	%7 = getelementptr i32, i32* %6, i32 1
	%8 = load i32, i32* %7
	%9 = load i32*, i32** %2
	%10 = getelementptr i32, i32* %9, i32 2
	%11 = load i32, i32* %10
	%12 = load i32*, i32** %2
	%13 = getelementptr i32, i32* %12, i32 3
	%14 = load i32, i32* %13
	call void @putint(i32 %5)
	call void @putch(i32 32)
	call void @putint(i32 %8)
	call void @putch(i32 10)
	call void @putint(i32 %11)
	call void @putch(i32 32)
	call void @putint(i32 %14)
	call void @putch(i32 10)
	ret i32 1

}
define dso_local i32 @main() {
	%1 = alloca i32
	store i32 0, i32* %1
	%2 = alloca i32
	%3 = call i32 @getint()
	store i32 %3, i32* %2
	%4 = alloca [2 x i32]
	%5 = getelementptr [2 x i32], [2 x i32]* %4, i32 0, i32 0
	store i32 0, i32* %5
	%6 = getelementptr [2 x i32], [2 x i32]* %4, i32 0, i32 1
	store i32 0, i32* %6
	%7 = alloca [4 x i32]
	%8 = alloca [12 x i32]
	%9 = getelementptr [12 x i32], [12 x i32]* %8, i32 0, i32 0
	store i32 1, i32* %9
	%10 = getelementptr [12 x i32], [12 x i32]* %8, i32 0, i32 1
	store i32 0, i32* %10
	%11 = getelementptr [12 x i32], [12 x i32]* %8, i32 0, i32 2
	store i32 1, i32* %11
	%12 = getelementptr [12 x i32], [12 x i32]* %8, i32 0, i32 3
	store i32 1, i32* %12
	%13 = getelementptr [12 x i32], [12 x i32]* %8, i32 0, i32 4
	store i32 2, i32* %13
	%14 = getelementptr [12 x i32], [12 x i32]* %8, i32 0, i32 5
	store i32 1, i32* %14
	%15 = getelementptr [12 x i32], [12 x i32]* %8, i32 0, i32 6
	store i32 3, i32* %15
	%16 = getelementptr [12 x i32], [12 x i32]* %8, i32 0, i32 7
	store i32 1, i32* %16
	%17 = getelementptr [12 x i32], [12 x i32]* %8, i32 0, i32 8
	store i32 4, i32* %17
	%18 = getelementptr [12 x i32], [12 x i32]* %8, i32 0, i32 9
	store i32 3, i32* %18
	%19 = getelementptr [12 x i32], [12 x i32]* %8, i32 0, i32 10
	store i32 -1, i32* %19
	%20 = getelementptr [12 x i32], [12 x i32]* %8, i32 0, i32 11
	store i32 1, i32* %20
	call void @putch(i32 97)
	call void @putch(i32 91)
	call void @putch(i32 110)
	call void @putch(i32 93)
	call void @putch(i32 32)
	call void @putch(i32 61)
	call void @putch(i32 32)
	call void @putch(i32 97)
	call void @putch(i32 91)
	call void @putch(i32 110)
	call void @putch(i32 32)
	call void @putch(i32 45)
	call void @putch(i32 32)
	call void @putch(i32 49)
	call void @putch(i32 93)
	call void @putch(i32 32)
	call void @putch(i32 43)
	call void @putch(i32 32)
	call void @putch(i32 97)
	call void @putch(i32 91)
	call void @putch(i32 110)
	call void @putch(i32 32)
	call void @putch(i32 45)
	call void @putch(i32 32)
	call void @putch(i32 50)
	call void @putch(i32 93)
	call void @putch(i32 32)
	call void @putch(i32 40)
	call void @putch(i32 102)
	call void @putch(i32 111)
	call void @putch(i32 114)
	call void @putch(i32 32)
	call void @putch(i32 100)
	call void @putch(i32 105)
	call void @putch(i32 102)
	call void @putch(i32 102)
	call void @putch(i32 101)
	call void @putch(i32 114)
	call void @putch(i32 101)
	call void @putch(i32 110)
	call void @putch(i32 116)
	call void @putch(i32 32)
	call void @putch(i32 105)
	call void @putch(i32 110)
	call void @putch(i32 105)
	call void @putch(i32 116)
	call void @putch(i32 32)
	call void @putch(i32 118)
	call void @putch(i32 97)
	call void @putch(i32 108)
	call void @putch(i32 117)
	call void @putch(i32 101)
	call void @putch(i32 115)
	call void @putch(i32 41)
	call void @putch(i32 10)
	br label %21

21:	; cond 
	%22 = load i32, i32* %2
	%23 = load i32, i32* %1
	%24 = icmp sgt i32 %22, %23
	br i1 %24, label %25, label %100

25:	; forBody 
	%26 = alloca i32
	%27 = call i32 @getint()
	store i32 %27, i32* %26
	%28 = load i32, i32* %26
	%29 = getelementptr [4 x i32], [4 x i32]* %7, i32 0, i32 0
	%30 = call i32 @power(i32 %28, i32* %29)
	%31 = alloca i32
	store i32 %30, i32* %31
	%32 = load i32, i32* %26
	call void @putch(i32 47)
	call void @putch(i32 42)
	call void @putch(i32 32)
	call void @putch(i32 105)
	call void @putch(i32 110)
	call void @putch(i32 112)
	call void @putch(i32 117)
	call void @putch(i32 116)
	call void @putch(i32 32)
	call void @putch(i32 61)
	call void @putch(i32 32)
	call void @putint(i32 %32)
	call void @putch(i32 32)
	call void @putch(i32 42)
	call void @putch(i32 47)
	call void @putch(i32 10)
	br label %33

33:	; cond 
	%34 = load i32, i32* %31
	%35 = zext i1 0 to i32
	%36 = icmp ne i32 %34, %35
	br i1 %36, label %37, label %42

37:	; cond 
	%38 = call i32 @error()
	%39 = zext i1 0 to i32
	%40 = icmp ne i32 %38, %39
	%41 = or i1 %36, %40
	br i1 %41, label %42, label %45

42:	; ifTrue 
	%43 = load i32, i32* %2
	%44 = sub i32 %43, 1
	store i32 %44, i32* %2
	br label %45

45:	; ifEnd 
	br label %46

46:	; cond 
	%47 = load i32, i32* %31
	%48 = zext i1 0 to i32
	%49 = icmp ne i32 %47, %48
	br i1 %49, label %56, label %50

50:	; cond 
	%51 = getelementptr [4 x i32], [4 x i32]* %7, i32 0, i32 0
	%52 = call i32 @out(i32* %51)
	%53 = zext i1 0 to i32
	%54 = icmp ne i32 %52, %53
	%55 = or i1 %49, %54
	br i1 %55, label %56, label %93

56:	; ifTrue beforeFor 
	%57 = alloca i32
	store i32 0, i32* %57
	br label %58

58:	; cond 
	%59 = load i32, i32* %57
	%60 = icmp slt i32 %59, 6
	br i1 %60, label %63, label %61

61:	; cond 
	%62 = or i1 %60, 1
	br i1 %62, label %63, label %92

63:	; forBody 
	%64 = getelementptr [2 x i32], [2 x i32]* %4, i32 0, i32 0
	%65 = getelementptr [4 x i32], [4 x i32]* %7, i32 0, i32 0
	%66 = load i32, i32* %57
	%67 = mul i32 %66, 2
	%68 = add i32 0, %67
	%69 = getelementptr [12 x i32], [12 x i32]* %8, i32 0, i32 %68
	call void @__vec_mul(i32* %64, i32* %65, i32* %69)
	%70 = load i32, i32* %57
	%71 = mul i32 %70, 2
	%72 = add i32 1, %71
	%73 = getelementptr [12 x i32], [12 x i32]* %8, i32 0, i32 %72
	%74 = load i32, i32* %73
	%75 = load i32, i32* %57
	%76 = mul i32 %75, 2
	%77 = add i32 0, %76
	%78 = getelementptr [12 x i32], [12 x i32]* %8, i32 0, i32 %77
	%79 = load i32, i32* %78
	%80 = load i32, i32* %26
	%81 = getelementptr [2 x i32], [2 x i32]* %4, i32 0, i32 1
	%82 = load i32, i32* %81
	call void @putch(i32 119)
	call void @putch(i32 104)
	call void @putch(i32 101)
	call void @putch(i32 110)
	call void @putch(i32 32)
	call void @putch(i32 97)
	call void @putch(i32 91)
	call void @putch(i32 48)
	call void @putch(i32 93)
	call void @putch(i32 32)
	call void @putch(i32 61)
	call void @putch(i32 32)
	call void @putint(i32 %74)
	call void @putch(i32 44)
	call void @putch(i32 32)
	call void @putch(i32 97)
	call void @putch(i32 91)
	call void @putch(i32 49)
	call void @putch(i32 93)
	call void @putch(i32 32)
	call void @putch(i32 61)
	call void @putch(i32 32)
	call void @putint(i32 %79)
	call void @putch(i32 32)
	call void @putch(i32 61)
	call void @putch(i32 61)
	call void @putch(i32 62)
	call void @putch(i32 32)
	call void @putch(i32 97)
	call void @putch(i32 91)
	call void @putint(i32 %80)
	call void @putch(i32 93)
	call void @putch(i32 32)
	call void @putch(i32 61)
	call void @putch(i32 32)
	call void @putint(i32 %82)
	call void @putch(i32 10)
	%83 = load i32, i32* %57
	%84 = add i32 %83, 1
	store i32 %84, i32* %57
	br label %85

85:	; cond 
	%86 = load i32, i32* %57
	%87 = icmp sge i32 %86, 6
	br i1 %87, label %88, label %89

88:	; ifTrue 
	br label %90

89:	; else 
	br label %90

90:	; ifEnd loopEnd 
	br label %91

91:	; forStmt2 
	br label %61

92:	; forEnd 
	br label %93

93:	; ifEnd loopEnd 
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 10)
	%94 = load i32, i32* %2
	%95 = sub i32 1, %94
	%96 = sub i32 0, %95
	%97 = sub i32 0, %96
	%98 = sub i32 0, %97
	store i32 %98, i32* %2
	br label %99

99:	; forStmt2 
	br label %21

100:	; forEnd 
	call void @putch(i32 47)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 32)
	call void @putch(i32 69)
	call void @putch(i32 78)
	call void @putch(i32 68)
	call void @putch(i32 32)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 47)
	call void @putch(i32 10)
	ret i32 0

}

