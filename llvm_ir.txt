declare i32 @getint()
declare void @putint(i32)
declare void @putch(i32)
declare void @putstr(i8)
@fib_matrix = dso_local global [4 x i32] [i32 1, i32 1, i32 1, i32 0]
@__res = dso_local constant [4 x i32] [i32 5, i32 5, i32 2, i32 3]
@__useless = dso_local constant [4 x i32] [i32 1, i32 1, i32 1, i32 0]

define dso_local void @__vec_mul(i32* %0, i32* %1, i32* %2) {
	%4 = alloca i32*
	store i32* %0, i32** %4
	%5 = alloca i32*
	store i32* %1, i32** %5
	%6 = alloca i32*
	store i32* %2, i32** %6
	%7 = load i32*, i32** %4
	%8 = getelementptr i32, i32* %7, i32 0
	%9 = load i32*, i32** %6
	%10 = getelementptr i32, i32* %9, i32 0
	%11 = load i32, i32* %10
	%12 = load i32*, i32** %5
	%13 = getelementptr i32, i32* %12, i32 0
	%14 = load i32, i32* %13
	%15 = mul i32 %11, %14
	%16 = load i32*, i32** %6
	%17 = getelementptr i32, i32* %16, i32 1
	%18 = load i32, i32* %17
	%19 = load i32*, i32** %5
	%20 = getelementptr i32, i32* %19, i32 1
	%21 = load i32, i32* %20
	%22 = mul i32 %18, %21
	%23 = add i32 %15, %22
	store i32 %23, i32* %8
	%24 = load i32*, i32** %4
	%25 = getelementptr i32, i32* %24, i32 1
	%26 = load i32*, i32** %6
	%27 = getelementptr i32, i32* %26, i32 0
	%28 = load i32, i32* %27
	%29 = load i32*, i32** %5
	%30 = getelementptr i32, i32* %29, i32 2
	%31 = load i32, i32* %30
	%32 = mul i32 %28, %31
	%33 = load i32*, i32** %6
	%34 = getelementptr i32, i32* %33, i32 1
	%35 = load i32, i32* %34
	%36 = load i32*, i32** %5
	%37 = getelementptr i32, i32* %36, i32 3
	%38 = load i32, i32* %37
	%39 = mul i32 %35, %38
	%40 = add i32 %32, %39
	store i32 %40, i32* %25
	ret void

}
define dso_local void @__mat_mul(i32* %0, i32* %1, i32* %2) {
	%4 = alloca i32*
	store i32* %0, i32** %4
	%5 = alloca i32*
	store i32* %1, i32** %5
	%6 = alloca i32*
	store i32* %2, i32** %6
	%7 = load i32*, i32** %4
	%8 = getelementptr i32, i32* %7, i32 0
	%9 = load i32*, i32** %5
	%10 = getelementptr i32, i32* %9, i32 0
	%11 = load i32, i32* %10
	%12 = load i32*, i32** %6
	%13 = getelementptr i32, i32* %12, i32 0
	%14 = load i32, i32* %13
	%15 = mul i32 %11, %14
	%16 = load i32*, i32** %5
	%17 = getelementptr i32, i32* %16, i32 1
	%18 = load i32, i32* %17
	%19 = load i32*, i32** %6
	%20 = getelementptr i32, i32* %19, i32 2
	%21 = load i32, i32* %20
	%22 = mul i32 %18, %21
	%23 = add i32 %15, %22
	store i32 %23, i32* %8
	%24 = load i32*, i32** %4
	%25 = getelementptr i32, i32* %24, i32 1
	%26 = load i32*, i32** %5
	%27 = getelementptr i32, i32* %26, i32 0
	%28 = load i32, i32* %27
	%29 = load i32*, i32** %6
	%30 = getelementptr i32, i32* %29, i32 1
	%31 = load i32, i32* %30
	%32 = mul i32 %28, %31
	%33 = load i32*, i32** %5
	%34 = getelementptr i32, i32* %33, i32 1
	%35 = load i32, i32* %34
	%36 = load i32*, i32** %6
	%37 = getelementptr i32, i32* %36, i32 3
	%38 = load i32, i32* %37
	%39 = mul i32 %35, %38
	%40 = add i32 %32, %39
	store i32 %40, i32* %25
	%41 = load i32*, i32** %4
	%42 = getelementptr i32, i32* %41, i32 2
	%43 = load i32*, i32** %5
	%44 = getelementptr i32, i32* %43, i32 2
	%45 = load i32, i32* %44
	%46 = load i32*, i32** %6
	%47 = getelementptr i32, i32* %46, i32 0
	%48 = load i32, i32* %47
	%49 = mul i32 %45, %48
	%50 = load i32*, i32** %5
	%51 = getelementptr i32, i32* %50, i32 3
	%52 = load i32, i32* %51
	%53 = load i32*, i32** %6
	%54 = getelementptr i32, i32* %53, i32 2
	%55 = load i32, i32* %54
	%56 = mul i32 %52, %55
	%57 = add i32 %49, %56
	store i32 %57, i32* %42
	%58 = load i32*, i32** %4
	%59 = getelementptr i32, i32* %58, i32 3
	%60 = load i32*, i32** %5
	%61 = getelementptr i32, i32* %60, i32 2
	%62 = load i32, i32* %61
	%63 = load i32*, i32** %6
	%64 = getelementptr i32, i32* %63, i32 1
	%65 = load i32, i32* %64
	%66 = mul i32 %62, %65
	%67 = load i32*, i32** %5
	%68 = getelementptr i32, i32* %67, i32 3
	%69 = load i32, i32* %68
	%70 = load i32*, i32** %6
	%71 = getelementptr i32, i32* %70, i32 3
	%72 = load i32, i32* %71
	%73 = mul i32 %69, %72
	%74 = add i32 %66, %73
	store i32 %74, i32* %59
	ret void

}
define dso_local i32 @__power(i32 %0, i32* %1, i32* %2) {
	%4 = alloca i32
	store i32 %0, i32* %4
	%5 = alloca i32*
	store i32* %1, i32** %5
	%6 = alloca i32*
	store i32* %2, i32** %6
	%7 = load i32, i32* %4
	%8 = icmp eq i32 %7, 1
	br i1 %8, label %9, label %30

9:	; ifTrue 
	%10 = load i32*, i32** %6
	%11 = getelementptr i32, i32* %10, i32 0
	%12 = load i32*, i32** %5
	%13 = getelementptr i32, i32* %12, i32 0
	%14 = load i32, i32* %13
	store i32 %14, i32* %11
	%15 = load i32*, i32** %6
	%16 = getelementptr i32, i32* %15, i32 1
	%17 = load i32*, i32** %5
	%18 = getelementptr i32, i32* %17, i32 1
	%19 = load i32, i32* %18
	store i32 %19, i32* %16
	%20 = load i32*, i32** %6
	%21 = getelementptr i32, i32* %20, i32 2
	%22 = load i32*, i32** %5
	%23 = getelementptr i32, i32* %22, i32 2
	%24 = load i32, i32* %23
	store i32 %24, i32* %21
	%25 = load i32*, i32** %6
	%26 = getelementptr i32, i32* %25, i32 3
	%27 = load i32*, i32** %5
	%28 = getelementptr i32, i32* %27, i32 3
	%29 = load i32, i32* %28
	store i32 %29, i32* %26
	ret i32 0

30:	; else 
	%31 = load i32*, i32** %6
	%32 = getelementptr i32, i32* %31, i32 0
	%33 = load i32*, i32** %5
	%34 = getelementptr i32, i32* %33, i32 0
	%35 = getelementptr [4 x i32], [4 x i32]* @fib_matrix, i32 0, i32 0
	call void @__mat_mul(i32* %32, i32* %34, i32* %35)
	%36 = load i32*, i32** %5
	%37 = getelementptr i32, i32* %36, i32 0
	%38 = load i32*, i32** %6
	%39 = getelementptr i32, i32* %38, i32 0
	%40 = load i32, i32* %39
	store i32 %40, i32* %37
	%41 = load i32*, i32** %5
	%42 = getelementptr i32, i32* %41, i32 1
	%43 = load i32*, i32** %6
	%44 = getelementptr i32, i32* %43, i32 1
	%45 = load i32, i32* %44
	store i32 %45, i32* %42
	%46 = load i32*, i32** %5
	%47 = getelementptr i32, i32* %46, i32 2
	%48 = load i32*, i32** %6
	%49 = getelementptr i32, i32* %48, i32 2
	%50 = load i32, i32* %49
	store i32 %50, i32* %47
	%51 = load i32*, i32** %5
	%52 = getelementptr i32, i32* %51, i32 3
	%53 = load i32*, i32** %6
	%54 = getelementptr i32, i32* %53, i32 3
	%55 = load i32, i32* %54
	store i32 %55, i32* %52
	%56 = load i32, i32* %4
	%57 = sub i32 %56, 1
	%58 = load i32*, i32** %5
	%59 = getelementptr i32, i32* %58, i32 0
	%60 = load i32*, i32** %6
	%61 = getelementptr i32, i32* %60, i32 0
	%62 = call i32 @__power(i32 %57, i32* %59, i32* %61)
	ret i32 %62

63:	; ifEnd 
	ret i32 0

}
define dso_local i32 @power(i32 %0, i32* %1) {
	%3 = alloca i32
	store i32 %0, i32* %3
	%4 = alloca i32*
	store i32* %1, i32** %4
	%5 = load i32, i32* %3
	%6 = icmp sle i32 %5, 0
	br i1 %6, label %7, label %8

7:	; ifTrue 
	ret i32 -1

8:	; ifEnd 
	%9 = alloca [4 x i32]
	%10 = getelementptr [4 x i32], [4 x i32]* %9, i32 0, i32 0
	store i32 1, i32* %10
	%11 = getelementptr [4 x i32], [4 x i32]* %9, i32 0, i32 1
	store i32 1, i32* %11
	%12 = getelementptr [4 x i32], [4 x i32]* %9, i32 0, i32 2
	store i32 1, i32* %12
	%13 = getelementptr [4 x i32], [4 x i32]* %9, i32 0, i32 3
	store i32 0, i32* %13
	%14 = load i32, i32* %3
	%15 = getelementptr [4 x i32], [4 x i32]* %9, i32 0, i32 0
	%16 = load i32*, i32** %4
	%17 = getelementptr i32, i32* %16, i32 0
	%18 = call i32 @__power(i32 %14, i32* %15, i32* %17)
	ret i32 %18

}
define dso_local i32 @error() {
	call void @putch(i32 69)
	call void @putch(i32 114)
	call void @putch(i32 114)
	call void @putch(i32 111)
	call void @putch(i32 114)
	call void @putch(i32 33)
	call void @putch(i32 10)
	ret i32 1

}
define dso_local i32 @out(i32* %0) {
	%2 = alloca i32*
	store i32* %0, i32** %2
	%3 = load i32*, i32** %2
	%4 = getelementptr i32, i32* %3, i32 0
	%5 = load i32, i32* %4
	%6 = load i32*, i32** %2
	%7 = getelementptr i32, i32* %6, i32 1
	%8 = load i32, i32* %7
	%9 = load i32*, i32** %2
	%10 = getelementptr i32, i32* %9, i32 2
	%11 = load i32, i32* %10
	%12 = load i32*, i32** %2
	%13 = getelementptr i32, i32* %12, i32 3
	%14 = load i32, i32* %13
	call void @putint(i32 %5)
	call void @putch(i32 32)
	call void @putint(i32 %8)
	call void @putch(i32 10)
	call void @putint(i32 %11)
	call void @putch(i32 32)
	call void @putint(i32 %14)
	call void @putch(i32 10)
	ret i32 1

}
define dso_local i32 @main() {
	%1 = alloca i32
	store i32 0, i32* %1
	%2 = alloca i32
	%3 = call i32 @getint()
	store i32 %3, i32* %2
	%4 = alloca [2 x i32]
	%5 = getelementptr [2 x i32], [2 x i32]* %4, i32 0, i32 0
	store i32 0, i32* %5
	%6 = getelementptr [2 x i32], [2 x i32]* %4, i32 0, i32 1
	store i32 0, i32* %6
	%7 = alloca [4 x i32]
	%8 = alloca [12 x i32]
	%9 = getelementptr [12 x i32], [12 x i32]* %8, i32 0, i32 0
	store i32 1, i32* %9
	%10 = getelementptr [12 x i32], [12 x i32]* %8, i32 0, i32 1
	store i32 0, i32* %10
	%11 = getelementptr [12 x i32], [12 x i32]* %8, i32 0, i32 2
	store i32 1, i32* %11
	%12 = getelementptr [12 x i32], [12 x i32]* %8, i32 0, i32 3
	store i32 1, i32* %12
	%13 = getelementptr [12 x i32], [12 x i32]* %8, i32 0, i32 4
	store i32 2, i32* %13
	%14 = getelementptr [12 x i32], [12 x i32]* %8, i32 0, i32 5
	store i32 1, i32* %14
	%15 = getelementptr [12 x i32], [12 x i32]* %8, i32 0, i32 6
	store i32 3, i32* %15
	%16 = getelementptr [12 x i32], [12 x i32]* %8, i32 0, i32 7
	store i32 1, i32* %16
	%17 = getelementptr [12 x i32], [12 x i32]* %8, i32 0, i32 8
	store i32 4, i32* %17
	%18 = getelementptr [12 x i32], [12 x i32]* %8, i32 0, i32 9
	store i32 3, i32* %18
	%19 = getelementptr [12 x i32], [12 x i32]* %8, i32 0, i32 10
	store i32 -1, i32* %19
	%20 = getelementptr [12 x i32], [12 x i32]* %8, i32 0, i32 11
	store i32 1, i32* %20
	call void @putch(i32 97)
	call void @putch(i32 91)
	call void @putch(i32 110)
	call void @putch(i32 93)
	call void @putch(i32 32)
	call void @putch(i32 61)
	call void @putch(i32 32)
	call void @putch(i32 97)
	call void @putch(i32 91)
	call void @putch(i32 110)
	call void @putch(i32 32)
	call void @putch(i32 45)
	call void @putch(i32 32)
	call void @putch(i32 49)
	call void @putch(i32 93)
	call void @putch(i32 32)
	call void @putch(i32 43)
	call void @putch(i32 32)
	call void @putch(i32 97)
	call void @putch(i32 91)
	call void @putch(i32 110)
	call void @putch(i32 32)
	call void @putch(i32 45)
	call void @putch(i32 32)
	call void @putch(i32 50)
	call void @putch(i32 93)
	call void @putch(i32 32)
	call void @putch(i32 40)
	call void @putch(i32 102)
	call void @putch(i32 111)
	call void @putch(i32 114)
	call void @putch(i32 32)
	call void @putch(i32 100)
	call void @putch(i32 105)
	call void @putch(i32 102)
	call void @putch(i32 102)
	call void @putch(i32 101)
	call void @putch(i32 114)
	call void @putch(i32 101)
	call void @putch(i32 110)
	call void @putch(i32 116)
	call void @putch(i32 32)
	call void @putch(i32 105)
	call void @putch(i32 110)
	call void @putch(i32 105)
	call void @putch(i32 116)
	call void @putch(i32 32)
	call void @putch(i32 118)
	call void @putch(i32 97)
	call void @putch(i32 108)
	call void @putch(i32 117)
	call void @putch(i32 101)
	call void @putch(i32 115)
	call void @putch(i32 41)
	call void @putch(i32 10)
	br label %21

21:	; cond 
	%22 = load i32, i32* %2
	%23 = load i32, i32* %1
	%24 = icmp sgt i32 %22, %23
	br i1 %24, label %25, label %94

25:	; forBody 
	%26 = alloca i32
	%27 = call i32 @getint()
	store i32 %27, i32* %26
	%28 = load i32, i32* %26
	%29 = getelementptr [4 x i32], [4 x i32]* %7, i32 0, i32 0
	%30 = call i32 @power(i32 %28, i32* %29)
	%31 = alloca i32
	store i32 %30, i32* %31
	%32 = load i32, i32* %26
	call void @putch(i32 47)
	call void @putch(i32 42)
	call void @putch(i32 32)
	call void @putch(i32 105)
	call void @putch(i32 110)
	call void @putch(i32 112)
	call void @putch(i32 117)
	call void @putch(i32 116)
	call void @putch(i32 32)
	call void @putch(i32 61)
	call void @putch(i32 32)
	call void @putint(i32 %32)
	call void @putch(i32 32)
	call void @putch(i32 42)
	call void @putch(i32 47)
	call void @putch(i32 10)
	%33 = load i32, i32* %31
	call void @putch(i32 47)
	call void @putch(i32 42)
	call void @putch(i32 32)
	call void @putch(i32 114)
	call void @putch(i32 101)
	call void @putch(i32 116)
	call void @putch(i32 117)
	call void @putch(i32 114)
	call void @putch(i32 110)
	call void @putch(i32 61)
	call void @putint(i32 %33)
	call void @putch(i32 32)
	call void @putch(i32 42)
	call void @putch(i32 47)
	%34 = load i32, i32* %31 ;ret
	%35 = call i32 @error()
	%36 = zext i1 0 to i32
	%37 = icmp ne i32 %34, %36
	%38 = zext i1 0 to i32
	%39 = icmp ne i32 %35, %38
	%40 = and i1 %37, %39
	br i1 %40, label %41, label %44

41:	; ifTrue  ;n=n-1
	%42 = load i32, i32* %2
	%43 = sub i32 %42, 1
	store i32 %43, i32* %2
	br label %93

44:	; ifEnd 
	%45 = load i32, i32* %31
	%46 = getelementptr [4 x i32], [4 x i32]* %7, i32 0, i32 0
	%47 = call i32 @out(i32* %46)
	%48 = zext i1 0 to i32
	%49 = icmp ne i32 %45, %48
	%50 = zext i1 0 to i32
	%51 = icmp ne i32 %47, %50
	%52 = or i1 %49, %51
	br i1 %52, label %53, label %87

53:	; ifTrue beforeFor 
	%54 = alloca i32
	store i32 0, i32* %54
	br label %55

55:	; cond 
	%56 = load i32, i32* %54
	%57 = icmp slt i32 %56, 6
	br i1 1, label %58, label %86

58:	; forBody 
	%59 = getelementptr [2 x i32], [2 x i32]* %4, i32 0, i32 0
	%60 = getelementptr [4 x i32], [4 x i32]* %7, i32 0, i32 0
	%61 = load i32, i32* %54
	%62 = mul i32 %61, 2
	%63 = add i32 0, %62
	%64 = getelementptr [12 x i32], [12 x i32]* %8, i32 0, i32 %63
	call void @__vec_mul(i32* %59, i32* %60, i32* %64)
	%65 = load i32, i32* %54
	%66 = mul i32 %65, 2
	%67 = add i32 1, %66
	%68 = getelementptr [12 x i32], [12 x i32]* %8, i32 0, i32 %67
	%69 = load i32, i32* %68
	%70 = load i32, i32* %54
	%71 = mul i32 %70, 2
	%72 = add i32 0, %71
	%73 = getelementptr [12 x i32], [12 x i32]* %8, i32 0, i32 %72
	%74 = load i32, i32* %73
	%75 = load i32, i32* %26
	%76 = getelementptr [2 x i32], [2 x i32]* %4, i32 0, i32 1
	%77 = load i32, i32* %76
	call void @putch(i32 119)
	call void @putch(i32 104)
	call void @putch(i32 101)
	call void @putch(i32 110)
	call void @putch(i32 32)
	call void @putch(i32 97)
	call void @putch(i32 91)
	call void @putch(i32 48)
	call void @putch(i32 93)
	call void @putch(i32 32)
	call void @putch(i32 61)
	call void @putch(i32 32)
	call void @putint(i32 %69)
	call void @putch(i32 44)
	call void @putch(i32 32)
	call void @putch(i32 97)
	call void @putch(i32 91)
	call void @putch(i32 49)
	call void @putch(i32 93)
	call void @putch(i32 32)
	call void @putch(i32 61)
	call void @putch(i32 32)
	call void @putint(i32 %74)
	call void @putch(i32 32)
	call void @putch(i32 61)
	call void @putch(i32 61)
	call void @putch(i32 62)
	call void @putch(i32 32)
	call void @putch(i32 97)
	call void @putch(i32 91)
	call void @putint(i32 %75)
	call void @putch(i32 93)
	call void @putch(i32 32)
	call void @putch(i32 61)
	call void @putch(i32 32)
	call void @putint(i32 %77)
	call void @putch(i32 10)
	%78 = load i32, i32* %54
	%79 = add i32 %78, 1
	store i32 %79, i32* %54
	%80 = load i32, i32* %54
	%81 = icmp sge i32 %80, 6
	br i1 %81, label %82, label %83

82:	; ifTrue 
	br label %86

83:	; else 
	br label %85

84:	; ifEnd loopEnd 
	br label %85

85:	; forStmt2 
	br label %55

86:	; forEnd 
	br label %87

87:	; ifEnd loopEnd 
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 47)
	call void @putch(i32 10)
	%88 = load i32, i32* %2
	%89 = sub i32 1, %88
	%90 = sub i32 0, %89
	%91 = sub i32 0, %90
	%92 = sub i32 0, %91
	store i32 %92, i32* %2
	br label %93

93:	; forStmt2 
	br label %21

94:	; forEnd 
	call void @putch(i32 47)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 32)
	call void @putch(i32 69)
	call void @putch(i32 78)
	call void @putch(i32 68)
	call void @putch(i32 32)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 42)
	call void @putch(i32 47)
	call void @putch(i32 10)
	ret i32 0

}

